=begin
#Payments-VPN

#Esta API fornece os serviços de pagamento do Banco do Brasil.

OpenAPI spec version: 3.5

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.24
=end

module BancoBrasilPayments
  class ReturnedsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Returned Payments
    # Consultar as transferências via TED/DOC, conta pagamento e os pagamentos de boletos que foram efetivados e posteriormente devolvidos pelos favorecidos e/ou beneficiário.
    # @param gw_dev_app_key Chave de acesso do aplicativo do desenvolvedor. Esta chave é única e obtida no Portal “BB for Developers” e usada para identificar as requisições da aplicação do desenvolvedor.  Example: 0021239456d80136bebf005056891bed
    # @param authorization É um “token” de acesso fornecido pelo OAuth 2.0.  Example: Bearer [ACCESS_TOKEN]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :payment_contract Contrato de pagamento entre o terceiro e o Banco do Brasil. Opcionalmente, quando não informado, será considerado o contrato vinculado à identificação interna do cliente.
    # @option opts [Integer] :debit_branch_office Código da agência para débito. Não é necessário quando a solicitação é acessada pelo código de autorização no fluxo do OAuth.
    # @option opts [Integer] :debit_current_account Conta corrente de débito. Não é necessário quando a solicitação é acessada pelo código de autorização no fluxo do OAuth.
    # @option opts [String] :check_digits_debit_current_account Dígito do verificador da conta corrente para débito. Não é necessário quando a solicitação é acessada pelo código de autorização no fluxo do OAuth.
    # @option opts [String] :status_description Descrição da situação do pagamento: Agendado - Pagamento aguardando a data para efetivação do crédito;  Cancelado - Pagamento cancelado pelo Cliente Conveniado antes da data do crédito;  Consistente - Dados recebidos pelo Banco sem ocorrências quanto ao formato. Aguardando validação dos dados para liberação/efetivação dos pagamentos;  Devolvido - Pagamento efetuado e posteriormente recusado pelo recebedor. O valor é devolvida para a Conta corrente onde ocorreu o débito da requisição; Inconsistente - Dados recebidos pelo Banco com ocorrências quanto ao formato. A situação será alterada para rejeitado; Pago - Pagamento efetuado;  Pendente - Falta autorização para o débito do pagamento na conta do cliente conveniado;  Rejeitado - Dados do pagamento não passaram na validações físicas e/ou lógicas. Ex: agência e conta não existem, conta não pertence ao CPF informado; Vencido - Pagamento não efetuado na data indicada por falta de saldo ou falta de autorização para débito do pagamento na conta do cliente conveniado.
    # @option opts [Integer] :start_date Data inicial de envio da requisição a ser pesquisada.
    # @option opts [Integer] :end_date Data final de envio da requisição a ser pesquisada.
    # @option opts [Integer] :index Posição do índice. Cada resposta tem um limite de 300 ocorrências na lista paymentList, iniciada a partir do valor do índice fornecido. Para todas as ocorrências, itere sobre esse recurso usando o valor do campo nextIndex da resposta.
    # @return [RootTypeForReturnedPaymentsResponseObject]
    def consulta_pagamentos_retornados(gw_dev_app_key, authorization, opts = {})
      data, _status_code, _headers = consulta_pagamentos_retornados_with_http_info(gw_dev_app_key, authorization, opts)
      data
    end

    # Returned Payments
    # Consultar as transferências via TED/DOC, conta pagamento e os pagamentos de boletos que foram efetivados e posteriormente devolvidos pelos favorecidos e/ou beneficiário.
    # @param gw_dev_app_key Chave de acesso do aplicativo do desenvolvedor. Esta chave é única e obtida no Portal “BB for Developers” e usada para identificar as requisições da aplicação do desenvolvedor.  Example: 0021239456d80136bebf005056891bed
    # @param authorization É um “token” de acesso fornecido pelo OAuth 2.0.  Example: Bearer [ACCESS_TOKEN]
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :payment_contract Contrato de pagamento entre o terceiro e o Banco do Brasil. Opcionalmente, quando não informado, será considerado o contrato vinculado à identificação interna do cliente.
    # @option opts [Integer] :debit_branch_office Código da agência para débito. Não é necessário quando a solicitação é acessada pelo código de autorização no fluxo do OAuth.
    # @option opts [Integer] :debit_current_account Conta corrente de débito. Não é necessário quando a solicitação é acessada pelo código de autorização no fluxo do OAuth.
    # @option opts [String] :check_digits_debit_current_account Dígito do verificador da conta corrente para débito. Não é necessário quando a solicitação é acessada pelo código de autorização no fluxo do OAuth.
    # @option opts [String] :status_description Descrição da situação do pagamento: Agendado - Pagamento aguardando a data para efetivação do crédito;  Cancelado - Pagamento cancelado pelo Cliente Conveniado antes da data do crédito;  Consistente - Dados recebidos pelo Banco sem ocorrências quanto ao formato. Aguardando validação dos dados para liberação/efetivação dos pagamentos;  Devolvido - Pagamento efetuado e posteriormente recusado pelo recebedor. O valor é devolvida para a Conta corrente onde ocorreu o débito da requisição; Inconsistente - Dados recebidos pelo Banco com ocorrências quanto ao formato. A situação será alterada para rejeitado; Pago - Pagamento efetuado;  Pendente - Falta autorização para o débito do pagamento na conta do cliente conveniado;  Rejeitado - Dados do pagamento não passaram na validações físicas e/ou lógicas. Ex: agência e conta não existem, conta não pertence ao CPF informado; Vencido - Pagamento não efetuado na data indicada por falta de saldo ou falta de autorização para débito do pagamento na conta do cliente conveniado.
    # @option opts [Integer] :start_date Data inicial de envio da requisição a ser pesquisada.
    # @option opts [Integer] :end_date Data final de envio da requisição a ser pesquisada.
    # @option opts [Integer] :index Posição do índice. Cada resposta tem um limite de 300 ocorrências na lista paymentList, iniciada a partir do valor do índice fornecido. Para todas as ocorrências, itere sobre esse recurso usando o valor do campo nextIndex da resposta.
    # @return [Array<(RootTypeForReturnedPaymentsResponseObject, Integer, Hash)>] RootTypeForReturnedPaymentsResponseObject data, response status code and response headers
    def consulta_pagamentos_retornados_with_http_info(gw_dev_app_key, authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReturnedsApi.consulta_pagamentos_retornados ...'
      end
      # verify the required parameter 'gw_dev_app_key' is set
      if @api_client.config.client_side_validation && gw_dev_app_key.nil?
        fail ArgumentError, "Missing the required parameter 'gw_dev_app_key' when calling ReturnedsApi.consulta_pagamentos_retornados"
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling ReturnedsApi.consulta_pagamentos_retornados"
      end
      # resource path
      local_var_path = '/returneds'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'gw-dev-app-key'] = gw_dev_app_key
      query_params[:'paymentContract'] = opts[:'payment_contract'] if !opts[:'payment_contract'].nil?
      query_params[:'debitBranchOffice'] = opts[:'debit_branch_office'] if !opts[:'debit_branch_office'].nil?
      query_params[:'debitCurrentAccount'] = opts[:'debit_current_account'] if !opts[:'debit_current_account'].nil?
      query_params[:'checkDigitsDebitCurrentAccount'] = opts[:'check_digits_debit_current_account'] if !opts[:'check_digits_debit_current_account'].nil?
      query_params[:'statusDescription'] = opts[:'status_description'] if !opts[:'status_description'].nil?
      query_params[:'startDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'endDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?
      query_params[:'index'] = opts[:'index'] if !opts[:'index'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'RootTypeForReturnedPaymentsResponseObject' 

      auth_names = opts[:auth_names] || ['OAuth2-CC']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReturnedsApi#consulta_pagamentos_retornados\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
